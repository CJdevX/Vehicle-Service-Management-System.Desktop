package Panel;

import Class.Database;
import Class.RealTimeRemainingTime;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

public class scheduledJobPanel extends javax.swing.JPanel {

    Connection connect;
    private int jobNo;
    private String Date;
    RealTimeRemainingTime remain;

    public scheduledJobPanel() {
        initComponents();
        btn_status.setVisible(false);
        hiddenDate.setVisible(false);

        // Show Date
        Date d = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date = dateFormat.format(d);

        // Show Time
        new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Date d = new Date();
                SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm a");
                String time = dateFormat.format(d);
                hiddenDate.setText(time);
            }
        }).start();

        // Load Job List
        try {
            connect = Database.openConnection();
            String sql = "SELECT j.jobNo, j.vehicleNo, c.firstName, c.lastName FROM job j ";
            sql = sql + "INNER JOIN customer c ";
            sql = sql + "ON j.customerID = c.customerID ";
            PreparedStatement statement = connect.prepareStatement(sql);

            ResultSet result = statement.executeQuery();
            DefaultTableModel model = (DefaultTableModel) tbl_jobList.getModel();
            model.setRowCount(0);

            while (result.next()) {
                String no = result.getString("jobNo");
                String vNo = result.getString("vehicleNo");
                String name = result.getString("firstName") + " " + result.getString("lastName");

                model.addRow(new Object[]{no, vNo, name});
            }
            connect.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_search = new javax.swing.JLabel();
        srh_jobList = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_serviceList = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_jobList = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbl_search1 = new javax.swing.JLabel();
        srh_serviceList = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lbl_startedAt = new javax.swing.JLabel();
        lbl_estimatedTime = new javax.swing.JLabel();
        lbl_ramainingTime = new javax.swing.JLabel();
        lbl_endAt = new javax.swing.JLabel();
        btn_status = new javax.swing.JButton();
        hiddenDate = new javax.swing.JLabel();

        setBackground(new java.awt.Color(211, 211, 211));

        lbl_search.setText("Search");

        srh_jobList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                srh_jobListKeyReleased(evt);
            }
        });

        tbl_serviceList.setFont(new java.awt.Font("Cambria", 0, 16)); // NOI18N
        tbl_serviceList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Service ID", "Name", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_serviceList.setShowGrid(false);
        tbl_serviceList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_serviceListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_serviceList);

        tbl_jobList.setFont(new java.awt.Font("Cambria", 0, 16)); // NOI18N
        tbl_jobList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job Number", "Vehicle No", "Customer Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_jobList.setRowHeight(30);
        tbl_jobList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_jobListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_jobList);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Job List");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setText("Service List");

        lbl_search1.setText("Search");

        srh_serviceList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                srh_serviceListKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel1.setText("Started at");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel2.setText("Estimated Time");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel4.setText("Remaining Time");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel6.setText("End at");

        lbl_startedAt.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        lbl_startedAt.setText("Started at");

        lbl_estimatedTime.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        lbl_estimatedTime.setText("Estimated Time");

        lbl_ramainingTime.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        lbl_ramainingTime.setText("Remaining Time");

        lbl_endAt.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        lbl_endAt.setText("End at");

        btn_status.setText("Status");
        btn_status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_statusActionPerformed(evt);
            }
        });

        hiddenDate.setText("hiddenDate");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(30, 30, 30)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(60, 60, 60)
                            .addComponent(lbl_search)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(srh_jobList)
                            .addGap(20, 20, 20)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(jLabel3)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(lbl_search1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(srh_serviceList, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                .addGap(30, 30, 30)))
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 138, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addContainerGap(138, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(40, 40, 40))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(260, 260, 260)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_status, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbl_endAt)
                                            .addComponent(lbl_ramainingTime)
                                            .addComponent(lbl_startedAt)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(lbl_estimatedTime)))
                                .addGap(100, 100, 100))))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(hiddenDate)
                .addGap(382, 382, 382))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(hiddenDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(srh_jobList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_search)
                    .addComponent(srh_serviceList, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_search1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_startedAt)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lbl_estimatedTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(lbl_endAt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(lbl_ramainingTime))
                        .addGap(20, 20, 20)
                        .addComponent(btn_status))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbl_jobListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_jobListMouseClicked
        lbl_startedAt.setText(hiddenDate.getText());
        int row = tbl_jobList.getSelectedRow();
        DefaultTableModel model1 = (DefaultTableModel) tbl_jobList.getModel();

        try {
            connect = Database.openConnection();
            String sql = "SELECT js.jobNo, js.serviceID, s.name, js.status ";
            sql = sql + "FROM job_has_service js INNER JOIN service s ";
            sql = sql + "ON js.serviceID = s.serviceID ";
            sql = sql + "WHERE jobNo = " + model1.getValueAt(row, 0);
            PreparedStatement statement = connect.prepareStatement(sql);
            ResultSet result = statement.executeQuery();

            DefaultTableModel model2 = (DefaultTableModel) tbl_serviceList.getModel();
            model2.setRowCount(0);

            while (result.next()) {
                jobNo = result.getInt("jobNo");
                String id = result.getString("serviceID");
                String name = result.getString("name");
                String status = result.getString("status");

                model2.addRow(new Object[]{id, name, status});
            }
            connect.close();
            lbl_estimatedTime.setText("");
            lbl_ramainingTime.setText("");
            lbl_endAt.setText("");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tbl_jobListMouseClicked

    private void tbl_serviceListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_serviceListMouseClicked
        lbl_startedAt.setText(hiddenDate.getText());
        int row = tbl_serviceList.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tbl_serviceList.getModel();

        if (model.getValueAt(row, 2) == null) {
            btn_status.setText("Start");
            btn_status.setVisible(true);

            try {
                SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a"); // Define the input time format
                Date date = sdf.parse(hiddenDate.getText()); // Parse the initial time
                Calendar calendar = Calendar.getInstance(); // Create a Calendar instance
                calendar.setTime(date); // Set the time
                calendar.add(Calendar.MINUTE, 60); // Add 60 minutes
                lbl_estimatedTime.setText("1 Hour");

                String endTime = sdf.format(calendar.getTime()); // Format the new time back to a string
                lbl_endAt.setText(endTime);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
            }
            lbl_ramainingTime.setText("");

        } else if ("In Progress".equals(model.getValueAt(row, 2).toString())) {
            btn_status.setText("Complete");
            btn_status.setVisible(true);

            try {
                connect = Database.openConnection();
                String sql = "SELECT TIME_FORMAT(time, '%h:%i %p') AS time, date FROM job_has_service WHERE jobNo = ? AND serviceID = ?";
                PreparedStatement statement = connect.prepareStatement(sql);
                statement.setInt(1, jobNo);
                statement.setInt(2, Integer.parseInt(model.getValueAt(row, 0).toString()));
                ResultSet result = statement.executeQuery();

                if (result.next()) {
                    if (Date.equals(result.getString("date"))) {
                        lbl_startedAt.setText(result.getString("time"));

                        SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a"); // Define the input time format
                        Date date = sdf.parse(result.getString("time")); // Parse the initial time
                        Calendar calendar = Calendar.getInstance(); // Create a Calendar instance 
                        calendar.setTime(date); // Set the time
                        calendar.add(Calendar.MINUTE, 60); // Add 60 minutes
                        lbl_estimatedTime.setText("1 Hour");

                        String endTime = sdf.format(calendar.getTime()); // Format the new time back to a string
                        lbl_endAt.setText(endTime); // Output the result

                        remain = new RealTimeRemainingTime(endTime, lbl_ramainingTime);
                        remain.startRealTimeRemainingDisplay();

                        // Add a ListSelectionListener to detect when the row selection changes
                        tbl_serviceList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
                            @Override
                            public void valueChanged(ListSelectionEvent e) {
                                // Check if the selection is not changing from the current row (if any)
                                if (!e.getValueIsAdjusting()) {
                                    remain.stopTimer(); // Stop the timer when the row selection changes
                                }
                            }
                        });
                    }
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            lbl_ramainingTime.setText("Service Complete");
            btn_status.setVisible(false);
        }
    }//GEN-LAST:event_tbl_serviceListMouseClicked

    private void srh_jobListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_srh_jobListKeyReleased
        try {
            connect = Database.openConnection();
            String sql = "SELECT j.jobNo, j.vehicleNo, v.firstName, v.lastName ";
            sql = sql + "FROM job j INNER JOIN vehicle v ";
            sql = sql + "ON j.vehicleNo = v.vehicleNo ";
            sql = sql + "WHERE v.vehicleNo LIKE '%" + srh_jobList.getText() + "%'";
            PreparedStatement statement = connect.prepareStatement(sql);
            ResultSet result = statement.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tbl_jobList.getModel();
            model.setRowCount(0);

            while (result.next()) {
                String no = result.getString("jobNo");
                String vNo = result.getString("vehicleNo");
                String name = result.getString("firstName") + " " + result.getString("lastName");

                model.addRow(new Object[]{no, vNo, name});
            }
            connect.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_srh_jobListKeyReleased

    private void srh_serviceListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_srh_serviceListKeyReleased
        try {
            connect = Database.openConnection();
            String sql = "SELECT js.serviceID, s.name, js.status ";
            sql = sql + "FROM job_has_service js INNER JOIN service s ";
            sql = sql + "ON js.serviceID = s.serviceID ";
            sql = sql + "WHERE js.jobNo = " + jobNo + " AND s.name LIKE '%" + srh_serviceList.getText() + "%'";
            PreparedStatement statement = connect.prepareStatement(sql);
            ResultSet result = statement.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tbl_serviceList.getModel();
            model.setRowCount(0);

            while (result.next()) {
                String id = result.getString("serviceID");
                String name = result.getString("name");
                String status = result.getString("status");

                model.addRow(new Object[]{id, name, status});
            }
            connect.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_srh_serviceListKeyReleased

    private void btn_statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_statusActionPerformed
        lbl_startedAt.setText(hiddenDate.getText());

        connect = Database.openConnection();
        try {
            SimpleDateFormat inputFormat = new SimpleDateFormat("hh:mm a");
            SimpleDateFormat outputFormat = new SimpleDateFormat("HH:mm");

            // Parse the 12-hour time
            String Time = outputFormat.format(inputFormat.parse(hiddenDate.getText()));

            if ("Start".equals(btn_status.getText())) {
                int row = tbl_serviceList.getSelectedRow();
                DefaultTableModel model1 = (DefaultTableModel) tbl_serviceList.getModel();

                String sql1 = "UPDATE job_has_service SET status = 'In Progress', date = ?, time = ? WHERE jobNo = ? AND serviceID = ?";
                PreparedStatement statement1 = connect.prepareStatement(sql1);
                statement1.setString(1, Date);
                statement1.setString(2, Time);
                statement1.setInt(3, jobNo);
                statement1.setInt(4, Integer.parseInt(model1.getValueAt(row, 0).toString()));
                statement1.executeUpdate();

            } else {
                int row = tbl_serviceList.getSelectedRow();
                DefaultTableModel model = (DefaultTableModel) tbl_serviceList.getModel();

                String sql2 = "UPDATE job_has_service SET status = 'Complete' WHERE jobNo = ? AND serviceID = ?";
                PreparedStatement statement2 = connect.prepareStatement(sql2);
                statement2.setInt(1, jobNo);
                statement2.setInt(2, Integer.parseInt(model.getValueAt(row, 0).toString()));
                statement2.executeUpdate();

                remain.stopTimer();
                lbl_ramainingTime.setText("Service Complete");
            }

            String sql3 = "SELECT js.serviceID, s.name, js.status ";
            sql3 = sql3 + "FROM job_has_service js INNER JOIN service s ";
            sql3 = sql3 + "ON js.serviceID = s.serviceID ";
            sql3 = sql3 + "WHERE jobNo = " + jobNo;
            PreparedStatement statement = connect.prepareStatement(sql3);
            ResultSet result3 = statement.executeQuery();

            DefaultTableModel model2 = (DefaultTableModel) tbl_serviceList.getModel();
            model2.setRowCount(0);

            while (result3.next()) {
                String id = result3.getString("serviceID");
                String name = result3.getString("name");
                String status = result3.getString("status");

                model2.addRow(new Object[]{id, name, status});
            }

            connect.close();
            btn_status.setVisible(false);
            lbl_ramainingTime.setText("");
            lbl_estimatedTime.setText("");
            lbl_endAt.setText("");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_statusActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_status;
    private javax.swing.JLabel hiddenDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_endAt;
    private javax.swing.JLabel lbl_estimatedTime;
    private javax.swing.JLabel lbl_ramainingTime;
    private javax.swing.JLabel lbl_search;
    private javax.swing.JLabel lbl_search1;
    private javax.swing.JLabel lbl_startedAt;
    private javax.swing.JTextField srh_jobList;
    private javax.swing.JTextField srh_serviceList;
    private javax.swing.JTable tbl_jobList;
    private javax.swing.JTable tbl_serviceList;
    // End of variables declaration//GEN-END:variables
}
