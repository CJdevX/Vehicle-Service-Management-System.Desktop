package TableActionButton.Waiting;

import Class.Database;
import Class.JPanelLoader;
import Notification.Notification;
import Notification.Notification.Type;
import Panel.appointmentPanel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chala
 */
public class waitingPanelAction extends javax.swing.JPanel {

    JPanelLoader panelLoad = new JPanelLoader();
    private JTable table;
    private JPanel panel;
    Connection connect;
    private int appointmentIdCheck;
    
    public waitingPanelAction(JTable table, JPanel panel) {
        initComponents();
        this.table = table;
        this.panel = panel;
    }
    
    private void getAppointmentId(String vNo, String name) {
        try {
            connect = Database.openCloudConnection();
            String sql = "SELECT a.id FROM appointments a INNER JOIN services s ON a.service_id = s.id ";
            sql = sql + "WHERE a.vehicleNumber = '" + vNo + "' AND ";
            sql = sql + "s.name = '" + name + "'";
            PreparedStatement statement = connect.prepareStatement(sql);
            ResultSet result = statement.executeQuery();

            if (result.next()) {
                appointmentIdCheck = result.getInt("id");
            }

        } catch (Exception e) {
            showNotification("Error", Notification.Type.WARNING);
        }
    }
    
    private void showNotification(String message, Notification.Type type) {
        new Notification(this, type, Notification.Location.TOP_CENTER, message).showNotification();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Stop = new TableActionButton.Waiting.waitingActionButton();
        waitingActionButton8 = new TableActionButton.Waiting.waitingActionButton();

        Stop.setForeground(new java.awt.Color(255, 255, 255));
        Stop.setText("Stop");
        Stop.setFont(new java.awt.Font("Cambria", 1, 16)); // NOI18N
        Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopActionPerformed(evt);
            }
        });

        waitingActionButton8.setForeground(new java.awt.Color(255, 255, 255));
        waitingActionButton8.setText("Complete");
        waitingActionButton8.setFont(new java.awt.Font("Cambria", 1, 16)); // NOI18N
        waitingActionButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waitingActionButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Stop, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(waitingActionButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(waitingActionButton8, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopActionPerformed
        int row = table.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String vNo = model.getValueAt(row, 0).toString();
        String name = model.getValueAt(row, 1).toString();
        getAppointmentId(vNo, name);
        
        try {
            connect = Database.openCloudConnection();
            String sql = "UPDATE appointments SET status = 'pending' WHERE id = " + appointmentIdCheck;
            PreparedStatement statement = connect.prepareStatement(sql);
            statement.executeUpdate();
            
            appointmentPanel appointment = new appointmentPanel();
            panelLoad.jPanelLoader(panel, appointment);
            
            connect.close();
        } catch (Exception e) {
            showNotification("Error", Type.WARNING);
        }
    }//GEN-LAST:event_StopActionPerformed

    private void waitingActionButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waitingActionButton8ActionPerformed
        int row = table.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String vNo = model.getValueAt(row, 0).toString();
        String name = model.getValueAt(row, 1).toString();
        getAppointmentId(vNo, name);
        
        try {
            connect = Database.openCloudConnection();
            String sql = "UPDATE appointments SET status = 'completed' WHERE id = " + appointmentIdCheck;
            PreparedStatement statement = connect.prepareStatement(sql);
            statement.executeUpdate();
            
            appointmentPanel appointment = new appointmentPanel();
            panelLoad.jPanelLoader(panel, appointment);
            
            connect.close();
        } catch (Exception e) {
            showNotification("Error", Type.WARNING);
        }
    }//GEN-LAST:event_waitingActionButton8ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private TableActionButton.Waiting.waitingActionButton Stop;
    private TableActionButton.Waiting.waitingActionButton waitingActionButton8;
    // End of variables declaration//GEN-END:variables

}
